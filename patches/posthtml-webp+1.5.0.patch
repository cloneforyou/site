diff --git a/node_modules/posthtml-webp/.travis.yml b/node_modules/posthtml-webp/.travis.yml
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/CONTRIBUTING.md b/node_modules/posthtml-webp/CONTRIBUTING.md
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/LICENSE b/node_modules/posthtml-webp/LICENSE
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/README.md b/node_modules/posthtml-webp/README.md
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/changelog.md b/node_modules/posthtml-webp/changelog.md
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/lib/index.js b/node_modules/posthtml-webp/lib/index.js
index b764fd2..2a1d1f8 100644
--- a/node_modules/posthtml-webp/lib/index.js
+++ b/node_modules/posthtml-webp/lib/index.js
@@ -13,6 +13,14 @@ module.exports = function (options) {
     options.extensionIgnore = []
   }
 
+  if (options.domainIgnore === undefined) {
+    options.domainIgnore = []
+  }
+
+  if (options.domainIgnore === undefined) {
+    options.domainIgnore = []
+  }
+
   if (options.replaceExtension === undefined) {
     options.replaceExtension = false
   }
@@ -20,11 +28,12 @@ module.exports = function (options) {
   return function posthtmlWebp (tree) {
     tree.match([{ tag: 'img' }, { tag: 'amp-img' }], function (imgNode) {
       if (imgNode.skip) return imgNode
-      var classes = imgNode.attrs && imgNode.attrs.class && (imgNode.attrs.class.split(' ') || [])
+      var classes = (imgNode.attrs && imgNode.attrs.class && imgNode.attrs.class.split(' ')) || []
       var extension = imgNode.attrs.src.split('.').pop()
       var isIgnoredByClass = options.classIgnore.filter(className => classes.includes(className)).length > 0
       var isIgnoredByExtension = options.extensionIgnore.filter(fileExtension => fileExtension === extension).length > 0
-      var isIgnore = isIgnoredByClass || isIgnoredByExtension
+      var isIgnoredByDomain = options.domainIgnore.some(d => {try {return imgNode.attrs.src.includes(d)} catch (error) {throw new Error(JSON.stringify(imgNode.attrs, undefined, 4))}})
+      var isIgnore = isIgnoredByClass || isIgnoredByExtension || isIgnoredByDomain
       if (isIgnore) return imgNode
       switch (imgNode.tag) {
         case 'amp-img':
@@ -83,11 +92,11 @@ function getPicture (imgNode, options) {
     .concat(src)
     .filter(Boolean)
     .map(value => {
-      value = value.trim().split(/\s/)
-      var path = options.replaceExtension ? removeExtension(value[0]) : value[0]
-      var size = value[1]
+      var [pathAndQuery, size] = value.trim().split(/\s/)
+      var [path, query] = pathAndQuery.split("?");
+      var cleanedPath = options.replaceExtension ? removeExtension(path) : path
 
-      return [path + '.webp', size].filter(Boolean).join(' ')
+      return [cleanedPath + '.webp' + (query ? `?${query}` : ""), size].filter(Boolean).join(' ')
     })
     .join(', ')
 
diff --git a/node_modules/posthtml-webp/lib/index.js.orig b/node_modules/posthtml-webp/lib/index.js.orig
new file mode 100755
index 0000000..a5327f1
--- /dev/null
+++ b/node_modules/posthtml-webp/lib/index.js.orig
@@ -0,0 +1,112 @@
+'use strict'
+
+module.exports = function (options) {
+  if (!options) {
+    options = {}
+  }
+
+  if (options.classIgnore === undefined) {
+    options.classIgnore = []
+  }
+
+  if (options.extensionIgnore === undefined) {
+    options.extensionIgnore = []
+  }
+
+  if (options.domainIgnore === undefined) {
+    options.domainIgnore = []
+  }
+
+  if (options.replaceExtension === undefined) {
+    options.replaceExtension = false
+  }
+
+  return function posthtmlWebp (tree) {
+    tree.match([{ tag: 'img' }, { tag: 'amp-img' }], function (imgNode) {
+      if (imgNode.skip) return imgNode
+      var classes = imgNode.attrs && imgNode.attrs.class && (imgNode.attrs.class.split(' ') || [])
+      var extension = imgNode.attrs.src.split('.').pop()
+      var isIgnoredByClass = options.classIgnore.filter(className => classes.includes(className)).length > 0
+      var isIgnoredByExtension = options.extensionIgnore.filter(fileExtension => fileExtension === extension).length > 0
+      var isIgnoredByDomain = options.domainIgnore.some(d => imgNode.attrs.src.includes(d))
+      var isIgnore = isIgnoredByClass || isIgnoredByExtension || isIgnoredByDomain
+      if (isIgnore) return imgNode
+      switch (imgNode.tag) {
+        case 'amp-img':
+          return getAmpPicture(imgNode, options)
+        default:
+          return getPicture(imgNode, options)
+      }
+    })
+
+    return tree
+  }
+}
+
+function removeExtension (filename) {
+  var extIndex = filename.lastIndexOf('.')
+  if (extIndex === -1) {
+    // Filename has no extension
+    return filename
+  } else {
+    return filename.substring(0, extIndex)
+  }
+}
+
+function getAmpPicture (imgNode, options) {
+  imgNode.skip = true
+
+  var src = imgNode.attrs.src
+  if (options.replaceExtension) {
+    src = removeExtension(src)
+  }
+  src += '.webp'
+  return {
+    tag: 'amp-img',
+    attrs: {
+      ...imgNode.attrs,
+      src
+    },
+    content: [
+      {
+        ...imgNode,
+        attrs: {
+          ...imgNode.attrs,
+          fallback: ''
+        }
+      }
+    ]
+  }
+}
+
+function getPicture (imgNode, options) {
+  imgNode.skip = true
+
+  var src = imgNode.attrs.src
+  var srcset = (imgNode.attrs.srcset || '')
+    .split(',')
+    .concat(src)
+    .filter(Boolean)
+    .map(value => {
+      var [pathAndQuery, size] = value.trim().split(/\s/)
+      var [path, query] = pathAndQuery.split("?");
+      var cleanedPath = options.replaceExtension ? removeExtension(path) : path
+
+      return [cleanedPath + '.webp' + (query ? `?${query}` : ""), size].filter(Boolean).join(' ')
+    })
+    .join(', ')
+
+  return {
+    tag: 'picture',
+    content: [
+      {
+        tag: 'source',
+        attrs: {
+          type: 'image/webp',
+          srcset
+        }
+      },
+      imgNode
+    ]
+  }
+}
diff --git a/node_modules/posthtml-webp/lib/index.js.rej b/node_modules/posthtml-webp/lib/index.js.rej
new file mode 100644
index 0000000..4fcd819
--- /dev/null
+++ b/node_modules/posthtml-webp/lib/index.js.rej
@@ -0,0 +1,48 @@
+--- node_modules/posthtml-webp/lib/index.js
++++ node_modules/posthtml-webp/lib/index.js
+@@ -13,6 +13,14 @@ module.exports = function (options) {
+     options.extensionIgnore = []
+   }
+ 
++  if (options.domainIgnore === undefined) {
++    options.domainIgnore = []
++  }
++
++  if (options.domainIgnore === undefined) {
++    options.domainIgnore = []
++  }
++
+   if (options.replaceExtension === undefined) {
+     options.replaceExtension = false
+   }
+@@ -20,11 +28,12 @@ module.exports = function (options) {
+   return function posthtmlWebp (tree) {
+     tree.match([{ tag: 'img' }, { tag: 'amp-img' }], function (imgNode) {
+       if (imgNode.skip) return imgNode
+-      var classes = imgNode.attrs && imgNode.attrs.class && (imgNode.attrs.class.split(' ') || [])
++      var classes = (imgNode.attrs && imgNode.attrs.class && imgNode.attrs.class.split(' ')) || []
+       var extension = imgNode.attrs.src.split('.').pop()
+       var isIgnoredByClass = options.classIgnore.filter(className => classes.includes(className)).length > 0
+       var isIgnoredByExtension = options.extensionIgnore.filter(fileExtension => fileExtension === extension).length > 0
+-      var isIgnore = isIgnoredByClass || isIgnoredByExtension
++      var isIgnoredByDomain = options.domainIgnore.some(d => {try {return imgNode.attrs.src.includes(d)} catch (error) {throw new Error(JSON.stringify(imgNode.attrs, undefined, 4))}})
++      var isIgnore = isIgnoredByClass || isIgnoredByExtension || isIgnoredByDomain
+       if (isIgnore) return imgNode
+       switch (imgNode.tag) {
+         case 'amp-img':
+@@ -83,11 +92,11 @@ function getPicture (imgNode, options) {
+     .concat(src)
+     .filter(Boolean)
+     .map(value => {
+-      value = value.trim().split(/\s/)
+-      var path = options.replaceExtension ? removeExtension(value[0]) : value[0]
+-      var size = value[1]
++      var [pathAndQuery, size] = value.trim().split(/\s/)
++      var [path, query] = pathAndQuery.split("?");
++      var cleanedPath = options.replaceExtension ? removeExtension(path) : path
+ 
+-      return [path + '.webp', size].filter(Boolean).join(' ')
++      return [cleanedPath + '.webp' + (query ? `?${query}` : ""), size].filter(Boolean).join(' ')
+     })
+     .join(', ')
+ 
diff --git a/node_modules/posthtml-webp/test/fixtures/basic.expected.html b/node_modules/posthtml-webp/test/fixtures/basic.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/extension.expected.html b/node_modules/posthtml-webp/test/fixtures/extension.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/extension.html b/node_modules/posthtml-webp/test/fixtures/extension.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/ignore-extension.expected.html b/node_modules/posthtml-webp/test/fixtures/ignore-extension.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/ignore-extension.html b/node_modules/posthtml-webp/test/fixtures/ignore-extension.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/ignore.expected.html b/node_modules/posthtml-webp/test/fixtures/ignore.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/ignore.html b/node_modules/posthtml-webp/test/fixtures/ignore.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/multisrcset.expected.html b/node_modules/posthtml-webp/test/fixtures/multisrcset.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/multisrcset.html b/node_modules/posthtml-webp/test/fixtures/multisrcset.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/no-extension.expected.html b/node_modules/posthtml-webp/test/fixtures/no-extension.expected.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/fixtures/no-extension.html b/node_modules/posthtml-webp/test/fixtures/no-extension.html
old mode 100644
new mode 100755
diff --git a/node_modules/posthtml-webp/test/test.js b/node_modules/posthtml-webp/test/test.js
old mode 100644
new mode 100755
