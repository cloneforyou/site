diff --git a/node_modules/eleventy-plugin-nesting-toc/toc.js b/node_modules/eleventy-plugin-nesting-toc/toc.js
index 72c764c..1e0715a 100755
--- a/node_modules/eleventy-plugin-nesting-toc/toc.js
+++ b/node_modules/eleventy-plugin-nesting-toc/toc.js
@@ -1,104 +1,105 @@
-const cheerio = require('cheerio');
+const cheerio = require("cheerio");
+const escapeHTML = require("escape-html");
 
 const defaults = {
-    tags: ['h2', 'h3', 'h4'],
-    wrapper: 'nav',
-    wrapperClass: 'toc',
-    headingText: '',
-    headingTag: 'h2'
+	tags: ["h2", "h3", "h4"],
+	wrapper: "nav",
+	wrapperClass: "toc",
+	headingText: "",
+	headingTag: "h2",
 };
 
 function getParent(prev, current) {
-    if (current.level > prev.level) {
-        //child heading
-        return prev;
-    } else if (current.level === prev.level) {
-        //sibling of previous
-        return prev.parent;
-    } else {
-        //above the previous
-        return getParent(prev.parent, current);
-    }
+	if (current.level > prev.level) {
+		//child heading
+		return prev;
+	} else if (current.level === prev.level) {
+		//sibling of previous
+		return prev.parent;
+	} else {
+		//above the previous
+		return getParent(prev.parent, current);
+	}
 }
 
 class Item {
-    constructor($el) {
-        if ($el) {
-            this.slug = $el.attr('id');
-            this.text = $el.text();
-            this.level = +$el.get(0).tagName.slice(1);
-        } else {
-            this.level = 0;
-        }
-        this.children = [];
-    }
-
-    html() {
-        let markup = '';
-        if (this.slug && this.text) {
-            markup += `
-                    <li><a href="#${this.slug}">${this.text}</a>
+	constructor($el) {
+		if ($el) {
+			this.slug = $el.attr("id");
+			$el.find("[aria-hidden]").remove();
+			this.text = $el.text();
+			this.level = +$el.get(0).tagName.slice(1);
+		} else {
+			this.level = 0;
+		}
+		this.children = [];
+	}
+
+	html() {
+		let markup = "";
+		if (this.slug && this.text) {
+			markup += `
+                    <li><a href="#${this.slug}">${escapeHTML(this.text)}</a>
             `;
-        }
-        if (this.children.length > 0) {
-            markup += `
+		}
+		if (this.children.length > 0) {
+			markup += `
                 <ol>
-                    ${this.children.map(item => item.html()).join('\n')}
+                    ${this.children.map(item => item.html()).join("\n")}
                 </ol>
             `;
-        }
+		}
 
-        if (this.slug && this.text) {
-            markup += '\t\t</li>'
-        }
+		if (this.slug && this.text) {
+			markup += "\t\t</li>";
+		}
 
-        return markup;
-    }
+		return markup;
+	}
 }
 
 class Toc {
-    constructor(htmlstring = '', options = defaults) {
-        this.options = {...defaults, ...options};
-        const selector = this.options.tags.join(',');
-        this.root = new Item();
-        this.root.parent = this.root;
-
-        const $ = cheerio.load(htmlstring);
-        const headings = $(selector).filter('[id]');
-
-        if (headings.length) {
-            let previous = this.root;
-            headings.each((index, heading) => {
-                const current = new Item($(heading));
-                const parent = getParent(previous, current);
-                current.parent = parent;
-                parent.children.push(current);
-                previous = current;
-            })
-        }
-    }
-
-    get() {
-        return this.root;
-    }
-
-    html() {
-        const {wrapper, wrapperClass, headingText, headingTag} = this.options;
-        const root = this.get();
-
-        let html = '';
-
-        if (root.children.length) {
-
-            if (headingText) {
-                html += `<${headingTag}>${headingText}</${headingTag}>\n`;
-            }
-
-            html += `<${wrapper} class="${wrapperClass}">${root.html()}</${wrapper}>`;
-        }
-
-        return html;
-    }
+	constructor(htmlstring = "", options = defaults) {
+		this.options = { ...defaults, ...options };
+		const selector = this.options.tags.join(",");
+		this.root = new Item();
+		this.root.parent = this.root;
+
+		const $ = cheerio.load(htmlstring);
+		const headings = $(selector).filter("[id]");
+
+		if (headings.length) {
+			let previous = this.root;
+			headings.each((index, heading) => {
+				const current = new Item($(heading));
+				const parent = getParent(previous, current);
+				current.parent = parent;
+				parent.children.push(current);
+				previous = current;
+			});
+		}
+	}
+
+	get() {
+		return this.root;
+	}
+
+	html() {
+		const { wrapper, wrapperClass, headingText, headingTag } = this.options;
+		const root = this.get();
+
+		let html = "";
+
+		if (root.children.length) {
+			html += `<${wrapper} class="${wrapperClass}">`;
+			if (headingText) {
+				html += `<${headingTag}>${headingText}</${headingTag}>\n`;
+			}
+			html += `${root.html()}</${wrapper}>`;
+		}
+
+		return html;
+	}
 }
 
 module.exports = Toc;
